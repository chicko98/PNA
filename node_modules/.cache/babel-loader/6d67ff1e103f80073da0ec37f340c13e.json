{"ast":null,"code":"var _jsxFileName = \"/Users/franciscopires/Downloads/final/src/App.js\";\nimport React, { useState } from \"react\";\nimport { questions } from './questions.js';\n\nfunction shuffle(array) {\n  let currentIndex = array.length,\n      randomIndex; // While there remain elements to shuffle.\n\n  while (currentIndex != 0) {\n    // Pick a remaining element.\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n}\n\nexport default function App() {\n  const numberquestions = 4;\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState([]);\n  const [disable, setDisable] = useState(false);\n  const [showNext, setShowNext] = useState(false);\n\n  const nextPrevHandler = text => {\n    if (text === \"next\" && currentQuestion !== numberquestions - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n\n    if (text === \"prev\" && currentQuestion !== 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n\n  const handleAnswerOptionClick = answerOption => {\n    let {\n      isCorrect,\n      answerText\n    } = answerOption;\n    setAnswer(previousState => [...previousState, answerText]);\n    console.log(answer);\n\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n\n    if (nextQuestion < numberquestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n      setDisable(true);\n    }\n  };\n\n  const reviewHandler = () => {\n    setShowScore(false);\n    setCurrentQuestion(0);\n    setShowNext(true);\n  };\n\n  const resetStateClick = () => {\n    setShowNext(false);\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setAnswer([]);\n    setDisable(false);\n    questions = shuffle(questions);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, showNext ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"prevnext-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      nextPrevHandler(\"prev\");\n    },\n    className: \"next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      nextPrevHandler(\"next\");\n    },\n    className: \"next\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, \"Next\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"retry\",\n    onClick: resetStateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, \"Retry\")) : \"\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"score-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"retry\",\n    onClick: resetStateClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, \"Retry\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"review\",\n    onClick: reviewHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"Review\"), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"You scored \", score, \" out of \", numberquestions))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", numberquestions), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, questions[currentQuestion].questionText)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].answerOptions.map(answerOption => /*#__PURE__*/React.createElement(\"button\", {\n    disabled: disable,\n    onClick: () => handleAnswerOptionClick(answerOption),\n    className: showNext ? answer[currentQuestion] === answerOption.answerText && !answerOption.isCorrect ? \"incorrect\" : answerOption.isCorrect ? \"correct\" : \"\" : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, answerOption.answerText))))));\n}","map":{"version":3,"sources":["/Users/franciscopires/Downloads/final/src/App.js"],"names":["React","useState","questions","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","App","numberquestions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","answer","setAnswer","disable","setDisable","showNext","setShowNext","nextPrevHandler","text","handleAnswerOptionClick","answerOption","isCorrect","answerText","previousState","console","log","nextQuestion","reviewHandler","resetStateClick","questionText","answerOptions","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { questions } from './questions.js'\n\nfunction shuffle(array) {\n\tlet currentIndex = array.length,  randomIndex;\n  \n\t// While there remain elements to shuffle.\n\twhile (currentIndex != 0) {\n  \n\t  // Pick a remaining element.\n\t  randomIndex = Math.floor(Math.random() * currentIndex);\n\t  currentIndex--;\n  \n\t  // And swap it with the current element.\n\t  [array[currentIndex], array[randomIndex]] = [\n\t\tarray[randomIndex], array[currentIndex]];\n\t}\n  \n\treturn array;\n  }\n  \n\nexport default function App() {\n\n \n  const numberquestions = 4;\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [answer, setAnswer] = useState([]);\n  const [disable, setDisable] = useState(false);\n  const [showNext, setShowNext] = useState(false);\n\n  const nextPrevHandler = (text) => {\n    if (text === \"next\" && currentQuestion !== numberquestions-1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n    if (text === \"prev\" && currentQuestion !== 0) {\n      setCurrentQuestion(currentQuestion - 1);\n    }\n  };\n\n  const handleAnswerOptionClick = (answerOption) => {\n    let { isCorrect, answerText } = answerOption;\n    setAnswer((previousState) => [...previousState, answerText]);\n    console.log(answer);\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < numberquestions) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n      setDisable(true);\n    }\n  };\n\n  const reviewHandler = () => {\n    setShowScore(false);\n    setCurrentQuestion(0);\n    setShowNext(true);\n  };\n\n  const resetStateClick =()=>{\n\tsetShowNext(false);\n\tsetCurrentQuestion (0)\n\tsetShowScore(false)\n\tsetScore(0)\n\tsetAnswer([])\n\tsetDisable(false)\n\tquestions = shuffle(questions)\n\t\n}\n  return (\n    <>\n      {showNext ? (\n        <div className=\"prevnext-section\">\n          <button\n            onClick={() => {\n              nextPrevHandler(\"prev\");\n            }}\n            className=\"next\"\n          >\n            Previous\n          </button>\n          <button\n            onClick={() => {\n              nextPrevHandler(\"next\");\n            }}\n            className=\"next\"\n          >\n            Next\n          </button>\n\t\t  <button className=\"retry\" onClick={resetStateClick}>\n\t\t\t\tRetry\t\t\t\t\n\t\t\t\t</button>\t\n        </div>\n      ) : (\n        \"\"\n      )}\n      <div className=\"app\">\n        {showScore ? (\n          <>\n            <div className=\"score-section\">\n\t\t\t\n\t\t\t\t<button className=\"retry\" onClick={resetStateClick}>\n\t\t\t\tRetry\n\t\t\t\t</button>\t\n\t\t\t\n              <button className=\"review\" onClick={reviewHandler}>\n                Review\n              </button>\n              <h3>\n                You scored {score} out of {numberquestions}\n              </h3>\n            </div>\n          </>\n        ) : (\n          <>\n            <div className=\"question-section\">\n              <div className=\"question-count\">\n                <span>Question {currentQuestion + 1}</span>/{numberquestions}\n              </div>\n              <div className=\"question-text\">\n                {questions[currentQuestion].questionText}\n              </div>\n            </div>\n            <div className=\"answer-section\">\n              {questions[currentQuestion].answerOptions.map((answerOption) => (\n                <button\n                  disabled={disable}\n                  onClick={() => handleAnswerOptionClick(answerOption)}\n                  className={\n                    showNext\n                      ? answer[currentQuestion] === answerOption.answerText &&\n                        !answerOption.isCorrect\n                        ? \"incorrect\"\n                        : answerOption.isCorrect\n                        ? \"correct\"\n                        : \"\"\n                      : \"\"\n                  }\n                >\n                  {answerOption.answerText}\n                </button>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </>\n  );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}